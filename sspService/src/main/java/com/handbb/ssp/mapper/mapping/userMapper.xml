<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<!-- 为这个mapper指定一个唯一的namespace，namespace的值习惯上设置成包名+sql映射文件名，这样就能够保证namespace的值是唯一的 
	例如namespace="me.gacl.mapping.userMapper"就是me.gacl.mapping(包名)+userMapper(userMapper.xml文件去除后缀) -->
	<!-- mapper代理开发规则 1 : namespace为接口全路径 -->
<mapper namespace="com.handbb.ssp.dao.UserMapper"> <!-- 接口名称 -->
	<!-- 在select标签中编写查询的SQL语句， 设置select标签的id属性为getUser，id属性值必须是唯一的，
	不能够重复 使用parameterType属性指明查询时使用的参数类型，resultType属性指明查询返回的结果集类型 
		resultType="me.gacl.domain.User"就表示将查询结果封装成一个User类的对象返回 User类就是users表所对应的实体类 -->
	<!-- 根据id查询得到一个user对象 -->
	<select id="findUserById" parameterType="java.lang.Integer" resultType="com.handbb.ssp.model.User">
		select * from user where id=#{id}
	</select>
	
	<!-- 模糊查询(可能返回多条) -->
	<!-- 指定的是单条记录所映射的java对象类型 -->
	<select id="findUserByName" parameterType="java.lang.String" resultType="com.handbb.ssp.model.User">
		select * from user where username like '%${value}%'
	</select>
	
	<!-- 添加用户 -->
	<insert id="insertUser" parameterType="com.handbb.ssp.model.User">
		<selectKey keyProperty="id" order="AFTER" resultType="java.lang.Integer">
			select last_insert_id()  <!-- 得到刚insert插入进去的主键值(只适用自增主键) -->
		</selectKey>
		insert into user(id,username,birthday,sex,address) values (#{id},#{username},#{birthday},#{sex},#{address})
	</insert>
	
	<!-- 删除用户 -->
	<delete id="deleteUserById" parameterType="java.lang.Integer">
		delete from user where id=#{id}
	</delete>
	
	<!-- 更新用户信息 -->
	<update id="updateUserById" parameterType="com.handbb.ssp.model.User">
		update user set username=#{username} where id=#{id}
	</update>
	
</mapper>



















